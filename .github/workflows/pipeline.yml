# .github/workflows/pipeline.yml
name: cryptopipe-hourly

on:
  schedule:
    - cron: "5 * * * *"   # HH:05 UTC every hour
  workflow_dispatch:

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Map your GitHub Secrets (lowercase) directly to the env names your code expects
    env:
      host:     ${{ secrets.host }}
      dbname:   ${{ secrets.dbname }}
      user:     ${{ secrets.user }}
      password: ${{ secrets.password }}
      port:     ${{ secrets.port }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r pipeline/requirements.txt

      # Optional: sanity-print (masked) to confirm envs are present (no password)
      - name: Show connection target (masked)
        run: |
          python - <<'PY'
          import os
          print("CONNECT TO:", os.getenv("host"), os.getenv("dbname"), os.getenv("user"), os.getenv("port"))
          assert all([os.getenv("host"), os.getenv("dbname"), os.getenv("user"), os.getenv("port")]), "Missing one or more DB envs"
          PY

      - name: Ingest bronze
        run: python pipeline/ingest.py

      - name: Run transforms (silver & gold)
        run: python pipeline/run_etl.py

      - name: Generate forecast + insight
        run: python pipeline/generate_insight.py

      - name: Health check
        run: |
          python - <<'PY'
          import os, psycopg
          with psycopg.connect(
              host=os.environ["host"],
              dbname=os.environ["dbname"],
              user=os.environ["user"],
              password=os.environ["password"],
              port=int(os.environ.get("port", "5432")),
              sslmode="require",
          ) as conn:
              with conn.cursor() as cur:
                  cur.execute("select count(*) from gold_daily_metrics")
                  print("gold_daily_metrics rows:", cur.fetchone()[0])
                  cur.execute("select count(*) from insights")
                  print("insights rows:", cur.fetchone()[0])
          PY
